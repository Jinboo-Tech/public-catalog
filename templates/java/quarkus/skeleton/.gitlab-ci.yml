stages:
  - build
  - publish_k8s
  - publish_mockserver
  - publish_spechouse

build_project:
  stage: build
  image: gradle:jdk-${{ values.javaVersion }}
  script:
    - gradle wrapper
    - ./gradlew clean build \
      -Dquarkus.kubernetes.ports."http".host-port=4003 \
      -Dquarkus.container-image.build=true \
      -Dquarkus.container-image.push=true \
      {%- if values.docker_window == 'custom' %}
      -Dquarkus.container-image.registry=${{ values.docker_generic }} \
      {%- else %}
      -Dquarkus.container-image.registry=registry.hub.docker.com \
      {%- endif %}
      -Dquarkus.container-image.group=${{ values.docker_organization }} \
      -Dquarkus.container-image.username=$DOCKER_USERNAME \
      -Dquarkus.container-image.password=$DOCKER_PASSWORD \
      -Dquarkus.kubernetes.namespace=vkpr \
      -Dquarkus.kubernetes.ingress.expose=true \
      -Dquarkus.kubernetes.ingress.ingress-class-name=kong \
      -Dquarkus.kubernetes.ingress.host=rest.platform.vee.codes \
      -Dquarkus.kubernetes.ingress.tls."rest.platform.vee.codes-tls".enabled=true \
      -Dquarkus.kubernetes.ingress.tls."rest.platform.vee.codes-tls".hosts=rest.platform.vee.codes \
      -Dquarkus.kubernetes.ingress.annotations."backstage.io/kubernetes-id"=spring-sample-app \
      -Dquarkus.kubernetes.ingress.annotations."cert-manager.io/cluster-issuer"=certmanager-issuer \
      -Dquarkus.kubernetes.ingress.annotations."konghq.com/https-redirect-status-code"=308 \
      -Dquarkus.kubernetes.ingress.annotations."konghq.com/preserve-host"=true \
      -Dquarkus.kubernetes.ingress.annotations."konghq.com/protocols"=https \
      -Dquarkus.kubernetes.ingress.annotations."konghq.com/strip-path"=true \
      -Dquarkus.kubernetes.ingress.annotations."kubernetes.io/tls-acme"=true
    {%- if values.exportKongKubernetes %}
    - npx insomnia-inso generate config "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')" --type kubernetes --output ./k8s/kong-kubernetes.yaml
    {%- endif %}

Publish K8S Artifact:
  #image: ubuntu-latest
  image: dmnemec/copy_file_to_another_repo_action:latest
  variables:
    API_TOKEN_GITHUB: $API_TOKEN_GITHUB
  script:
    - copy_file_to_another_repo_action \
        --source_file=build/kubernetes/kubernetes.yml \
        --destination_repo=${{ values.argoRepoUrl }} \
        --destination_folder=/${{ values.componentId }}/ \
        --destination_branch=master \
        --user_email=veecode-bot@vee.codes \
        --user_name=veecode-bot \
        --commit_message='A custom message for the commit'

publish-spec-to-mockserver:
  stage: publish_mockserver
  image: ubuntu:latest
  variables:
    MOCK_SERVER: "${{ values.mockserverUrl }}"
    NAME: ""
  before_script:
    - apt-get update && apt-get install -y wget curl
    - wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
    - chmod a+x /usr/local/bin/yq
    - yq --version
  #check
  script:
    - test -f .insomnia/ApiSpec/spc_*.yml && export CHECK_INSOMNIA_WORKSPACE=true || export CHECK_INSOMNIA_WORKSPACE=false
    - export NAME=$(echo $CI_PROJECT_NAME | awk -F / '{print $2 }')
    - if [ $CHECK_INSOMNIA_WORKSPACE == "true" ]; then
        wget -qO - https://insomnia.rest/insomnia/insomnia/latest/linux?app=com.insomnia.app&source=website | tar -xz -C /tmp;
        export PATH="/tmp/Insomnia:$PATH";
        inso --version;
        inso export spec "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')" --output ./openapi-swagger.yaml;
      fi
    - if [ "${MOCK_SERVER}" != "" ]; then
        touch MOCK.yaml;
        yq 'with(.paths; with_entries(.key |=strenv(NAME) + .))' ./openapi-swagger.yaml >> MOCK.yaml;
        cat MOCK.yaml | python -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin.read()), indent=2, sort_keys=False))' > MOCK.json;
        curl --max-time 30 -v -X PUT "${MOCK_SERVER}/mockserver/openapi$([ ! -z "$API_KEY" ] && echo "?apikey=${{ secrets.API_KEY }}")" -d "{\"specUrlOrPayload\": $(cat $PWD/MOCK.json)}";
        echo "Adding mockserver address to spec";
        yq ".servers += [{\"url\": \"${MOCK_SERVER}$([[ ! "${MOCK_SERVER}" == */ ]] && echo "/")${NAME}\"}]" -i ./openapi-swagger.yaml;
      fi
    - mkdir -p api/;
      echo $NAME;
      touch "api/$NAME.yaml";
      sed -i "s|\"|'|g" ./openapi-swagger.yaml;
      yq eval ".apiVersion = \"backstage.io/v1alpha1\"" -i "api/$NAME.yaml";
      yq eval ".kind = \"API\" " -i "api/$NAME.yaml";
      yq eval ".metadata.name=strenv(NAME)" -i "api/$NAME.yaml";
      yq eval ".metadata.description= \"$(cat ./openapi-swagger.yaml | yq e '.info.description')\"" -i "api/$NAME.yaml";
      yq eval ".metadata.tags = (strenv(TAGS) | sub(\" +\", \"\") | split(\",\"))" -i "api/$NAME.yaml";
      yq eval ".spec.type = \"openapi\"" -i "api/$NAME.yaml";
      yq eval ".spec.lifecycle = \"production\"" -i "api/$NAME.yaml";
      yq eval ".spec.owner = \"consumer\"" -i "api/$NAME.yaml";
      yq eval ".spec.definition = \"$(yq -I4 ./openapi-swagger.yaml)\"" --inplace "api/$NAME.yaml";

publish_to_spec_house:
  stage: publish_spechouse
  image: ubuntu-latest
  variables:
    API_TOKEN_GITLAB: $API_TOKEN_GITLAB
    BRANCH: $CI_COMMIT_REF_NAME
    USER_NAME: $GITLAB_USER_NAME
  before_script:
    - apt-get update && apt-get install -y curl
  script:
    - curl -o api $CI_SERVER_URL/${{ values.specPublish }}/raw/${{ values.branchName }}/api
    - git config --global user.name "$USER_NAME"
    - git add api
    - git commit -m "Pipeline commit"
    - git push